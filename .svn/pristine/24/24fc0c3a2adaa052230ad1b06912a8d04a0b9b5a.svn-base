
\documentclass{article}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{float}
\usepackage[breaklinks=true]{hyperref}
\usepackage{gensymb}
\usepackage{subfig}



\begin{document}


\title{\vspace{-2.8cm}	Computer Graphics: Assignment 3 Part 2\\Inner Solar System Simulator}
\author{Enrico Fini}
\date{}

\maketitle

\section{Report}

\subsection{Usage}
To run the simulation:\\
\textit{./assign3\_part2}\\\\
Keyboard controls:
\begin{itemize}
\item[1]: object viewer camera;
\item[2]: world object viewer camera;
\item[3]: custom camera that follows planets;
\item[S]: toggle Sun texture (procedural/mix);
\item[9]: planets rotation slows down;
\item[0]: planet rotation speeds up.
\item[M]: camera follows Mercury (in custom camera mode);
\item[V]: camera follows Venus (in custom camera mode);
\item[E]: camera follows Earth (in custom camera mode);
\item[N]: camera follows Mars (in custom camera mode);
\item[UP]: camera translates up perpendicularly to the planets plane(in custom camera mode);
\item[DOWN]: camera translates down perpendicularly to the planets plane(in custom camera mode);
\item[Z]: camera zooms in (in custom camera mode);
\end{itemize}
Furthermore, to enable sound in a secure way (I couldn't test on Windows or Linux), if you are running MacOs you can open \textit{model-view.cpp} file and edit line 31 with "ON".

\subsection{Features}
Here are the features of the simulator:
\begin{itemize}
\item \textbf{Point Light}: the Sun is a point light located at the center of the world coordinate system. The planets feature texture and material properties; 
\item \textbf{Multiple Cameras}: the simulation features 3 different cameras:
\begin{itemize}
\item ObjectViewer: provided by you;
\item WorldObjectViewer: provided by you;
\item FollowViewer: the camera is located on the rotation axes of the solar system and follows the selected planet.
\end{itemize}
\item\textbf{Texture Mapping}: for every planet both diffuse texture and specular texture are provided. For what concerns the sun I couldn't find a satisfying texture, so I decided to mix two different textures at runtime, the result can be shown pressing "S";
\item\textbf{Skybox}: a skybox with stars has been set up in the skybox shader;
\item\textbf{Multiple Vertex/Fragment Shaders} 3 shaders:
\begin{itemize}
\item mview shader: privides texturing, lighting;
\item skybox shader: enables the skybox;
\item procedural shader: create the procedural texture for the sun.
\end{itemize}
\item\textbf{Procedural Generation of Textures}: I used Simplex Noise to generate a procedural texture for the Sun. Since it is a 2D texture but it has to be placed on a sphere I computed longitude and latitude and used Mercator projection to generate x and y coordinates from the angles. To make the texture as uniform as possible I divided the sphere in patches using coordinates and generated the texture on the most suitable coordinates. You can find the code in the file \textit{procedural.frag};
\item\textbf{Particle System}: I formalized the revolution movement of the planets using a particle system. My implementation of gravitational force is similar to the repulsion force you showed us. I also tried to add code to take into account mass but the system started to behave randomly and I couldn't find out why. In this implementation the mass of the planets is considered unitary.
\item\textbf{Sound}: I added a background song to the simulation to make it more majestic. Unfortunately I don't own any Windows or Linux laptops so, if you have a MacOs machine and want to enable this feature you can edit line 31 in \textit{model-view.cpp} file.

\end{itemize}
NOTE: only the ratios between the sizes of the planets are meaningful but not wrt the size of the Sun. I tried to draw the objects in real scale but the planets ended up to be too small and almost impossible to see.



\end{document}